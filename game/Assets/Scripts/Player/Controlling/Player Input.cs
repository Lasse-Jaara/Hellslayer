//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Player/Controlling/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e7709feb-53bf-47ce-b402-47a36ba46c50"",
            ""actions"": [
                {
                    ""name"": ""MovementInput"",
                    ""type"": ""Value"",
                    ""id"": ""a2ec0521-85ca-46bf-bd35-2b3605a6c052"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseInput"",
                    ""type"": ""Value"",
                    ""id"": ""502ba441-8c2b-4c9a-8cd3-08e57b6c2511"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MenuInput"",
                    ""type"": ""Button"",
                    ""id"": ""053bb0bc-8939-4a57-9292-84753e6e8deb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpInput"",
                    ""type"": ""Button"",
                    ""id"": ""ff013e43-9483-4131-94e1-bd0304a9995b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintInput"",
                    ""type"": ""Button"",
                    ""id"": ""995ff73b-906f-4328-9061-99fe3e888f81"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchInput"",
                    ""type"": ""Button"",
                    ""id"": ""3b3ca5ca-738a-4601-b43c-4fb9dbe6e57e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
                    ""name"": ""SlideInput"",
                    ""type"": ""Button"",
                    ""id"": ""fdc40a36-1d35-4a20-bd2a-7fc1643d973b"",
=======
                    ""name"": ""AttackInput"",
                    ""type"": ""Button"",
                    ""id"": ""15a946ab-d6d9-44bd-ba6e-cce831b30fb3"",
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fde193c7-f359-4ce4-b594-ac4a7714597a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""011373c6-68c2-403f-98b3-fb477e5a6921"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""66321ebc-871c-497e-a29d-d3ee8d9fac72"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cf56f08e-8830-4d9c-8400-d20f7c98dd21"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4013c031-7f47-453a-bb63-3f21af2f704d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""87746db2-05dd-46fc-9ab7-6b8b95d12508"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""140d1e53-f698-47d1-a89e-fd064c75a766"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4fccf876-31b2-4e74-8d82-429d0fb61b98"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""160a7dcb-5300-4fd8-9ed1-26589fdc1de1"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64baf99d-b5a1-4265-872c-9ec7bd5534f1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""037add40-43f3-42bc-a95d-123eae59a1bd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""876f7577-9b1c-4d2c-bae9-6db53f6bb709"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1b4045a-dab7-4058-bcb9-7377c33d17d0"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
                    ""id"": ""2be5da41-1698-4306-9d79-e11f16085b4b"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlideInput"",
=======
                    ""id"": ""d383597c-c9c9-4269-bc43-45033cc228b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackInput"",
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MovementInput = m_Player.FindAction("MovementInput", throwIfNotFound: true);
        m_Player_MouseInput = m_Player.FindAction("MouseInput", throwIfNotFound: true);
        m_Player_MenuInput = m_Player.FindAction("MenuInput", throwIfNotFound: true);
        m_Player_JumpInput = m_Player.FindAction("JumpInput", throwIfNotFound: true);
        m_Player_SprintInput = m_Player.FindAction("SprintInput", throwIfNotFound: true);
        m_Player_CrouchInput = m_Player.FindAction("CrouchInput", throwIfNotFound: true);
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
        m_Player_SlideInput = m_Player.FindAction("SlideInput", throwIfNotFound: true);
=======
        m_Player_AttackInput = m_Player.FindAction("AttackInput", throwIfNotFound: true);
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInput.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_MovementInput;
    private readonly InputAction m_Player_MouseInput;
    private readonly InputAction m_Player_MenuInput;
    private readonly InputAction m_Player_JumpInput;
    private readonly InputAction m_Player_SprintInput;
    private readonly InputAction m_Player_CrouchInput;
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
    private readonly InputAction m_Player_SlideInput;
=======
    private readonly InputAction m_Player_AttackInput;
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementInput => m_Wrapper.m_Player_MovementInput;
        public InputAction @MouseInput => m_Wrapper.m_Player_MouseInput;
        public InputAction @MenuInput => m_Wrapper.m_Player_MenuInput;
        public InputAction @JumpInput => m_Wrapper.m_Player_JumpInput;
        public InputAction @SprintInput => m_Wrapper.m_Player_SprintInput;
        public InputAction @CrouchInput => m_Wrapper.m_Player_CrouchInput;
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
        public InputAction @SlideInput => m_Wrapper.m_Player_SlideInput;
=======
        public InputAction @AttackInput => m_Wrapper.m_Player_AttackInput;
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @MovementInput.started += instance.OnMovementInput;
            @MovementInput.performed += instance.OnMovementInput;
            @MovementInput.canceled += instance.OnMovementInput;
            @MouseInput.started += instance.OnMouseInput;
            @MouseInput.performed += instance.OnMouseInput;
            @MouseInput.canceled += instance.OnMouseInput;
            @MenuInput.started += instance.OnMenuInput;
            @MenuInput.performed += instance.OnMenuInput;
            @MenuInput.canceled += instance.OnMenuInput;
            @JumpInput.started += instance.OnJumpInput;
            @JumpInput.performed += instance.OnJumpInput;
            @JumpInput.canceled += instance.OnJumpInput;
            @SprintInput.started += instance.OnSprintInput;
            @SprintInput.performed += instance.OnSprintInput;
            @SprintInput.canceled += instance.OnSprintInput;
            @CrouchInput.started += instance.OnCrouchInput;
            @CrouchInput.performed += instance.OnCrouchInput;
            @CrouchInput.canceled += instance.OnCrouchInput;
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
            @SlideInput.started += instance.OnSlideInput;
            @SlideInput.performed += instance.OnSlideInput;
            @SlideInput.canceled += instance.OnSlideInput;
=======
            @AttackInput.started += instance.OnAttackInput;
            @AttackInput.performed += instance.OnAttackInput;
            @AttackInput.canceled += instance.OnAttackInput;
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @MovementInput.started -= instance.OnMovementInput;
            @MovementInput.performed -= instance.OnMovementInput;
            @MovementInput.canceled -= instance.OnMovementInput;
            @MouseInput.started -= instance.OnMouseInput;
            @MouseInput.performed -= instance.OnMouseInput;
            @MouseInput.canceled -= instance.OnMouseInput;
            @MenuInput.started -= instance.OnMenuInput;
            @MenuInput.performed -= instance.OnMenuInput;
            @MenuInput.canceled -= instance.OnMenuInput;
            @JumpInput.started -= instance.OnJumpInput;
            @JumpInput.performed -= instance.OnJumpInput;
            @JumpInput.canceled -= instance.OnJumpInput;
            @SprintInput.started -= instance.OnSprintInput;
            @SprintInput.performed -= instance.OnSprintInput;
            @SprintInput.canceled -= instance.OnSprintInput;
            @CrouchInput.started -= instance.OnCrouchInput;
            @CrouchInput.performed -= instance.OnCrouchInput;
            @CrouchInput.canceled -= instance.OnCrouchInput;
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
            @SlideInput.started -= instance.OnSlideInput;
            @SlideInput.performed -= instance.OnSlideInput;
            @SlideInput.canceled -= instance.OnSlideInput;
=======
            @AttackInput.started -= instance.OnAttackInput;
            @AttackInput.performed -= instance.OnAttackInput;
            @AttackInput.canceled -= instance.OnAttackInput;
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovementInput(InputAction.CallbackContext context);
        void OnMouseInput(InputAction.CallbackContext context);
        void OnMenuInput(InputAction.CallbackContext context);
        void OnJumpInput(InputAction.CallbackContext context);
        void OnSprintInput(InputAction.CallbackContext context);
        void OnCrouchInput(InputAction.CallbackContext context);
<<<<<<< HEAD:game/Assets/Scripts/Player/Controlling/Player Input.cs
        void OnSlideInput(InputAction.CallbackContext context);
=======
        void OnAttackInput(InputAction.CallbackContext context);
>>>>>>> 8a4b11e722b200064e5572a3b9a33aeb118edb2e:game/Assets/Scripts/Player/Player Input.cs
    }
}
